import os
from typing import List, Tuple

import pytest


@pytest.fixture(params=[1, 10, 100, 1000, 10000])
def n(request) -> int:
    return request.param


@pytest.fixture
def n_101() -> List[Tuple[int, int]]:
    return [
        (0, 1), (1, 1), (-1, 1), (2, 1), (1, 2), (-2, 1), (-1, 2), (3, 1),
        (1, 3), (-3, 1), (-1, 3), (3, 2), (2, 3), (-3, 2), (-2, 3), (4, 1),
        (1, 4), (-4, 1), (-1, 4), (4, 3), (3, 4), (-4, 3), (-3, 4), (5, 1),
        (1, 5), (-5, 1), (-1, 5), (5, 2), (2, 5), (-5, 2), (-2, 5), (5, 3),
        (3, 5), (-5, 3), (-3, 5), (5, 4), (4, 5), (-5, 4), (-4, 5), (6, 1),
        (1, 6), (-6, 1), (-1, 6), (6, 5), (5, 6), (-6, 5), (-5, 6), (7, 1),
        (1, 7), (-7, 1), (-1, 7), (7, 2), (2, 7), (-7, 2), (-2, 7), (7, 3),
        (3, 7), (-7, 3), (-3, 7), (7, 4), (4, 7), (-7, 4), (-4, 7), (7, 5),
        (5, 7), (-7, 5), (-5, 7), (7, 6), (6, 7), (-7, 6), (-6, 7), (8, 1),
        (1, 8), (-8, 1), (-1, 8), (8, 3), (3, 8), (-8, 3), (-3, 8), (8, 5),
        (5, 8), (-8, 5), (-5, 8), (8, 7), (7, 8), (-8, 7), (-7, 8), (9, 1),
        (1, 9), (-9, 1), (-1, 9), (9, 2), (2, 9), (-9, 2), (-2, 9), (9, 4),
        (4, 9), (-9, 4), (-4, 9), (9, 5), (5, 9)
    ]


@pytest.fixture
def stdout_file_path(request) -> str:
    file_path = os.path.join(os.curdir, 'test.stdout')

    def fin():
        if os.path.exists(file_path):
            os.remove(file_path)

    request.addfinalizer(fin)
    return file_path
